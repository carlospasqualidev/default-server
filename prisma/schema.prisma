//#region CONFIG
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//#endregion

//#region TOKENS
model tokens {
  id      String  @id @unique @default(nanoid(12))
  token   String  @unique
  hasUsed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//#endregion

//#region ACCESS
model accesses {
  id          String @id @unique @default(nanoid(12))
  environment String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users userAccesses[]
}

model userAccesses {
  id String @id @unique @default(nanoid(12))

  accessId String
  userId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  access accesses @relation(fields: [accessId], references: [id], onDelete: Cascade)
}

//#endregion

//#region PERMISSIONS
model permissions {
  id               String @id @unique @default(nanoid(12))
  name             String @unique
  permissionTypeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sublevels permissionSublevels[]
  type      permissionTypes       @relation(fields: [permissionTypeId], references: [id])

  accesses userAccessPermissions[]
}

model permissionSublevels {
  id           String @id @unique @default(nanoid(12))
  permissionId String
  name         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  personCompanyPermissions personCompanyPermissions[]
}

model permissionTypes {
  id   String @id @unique @default(nanoid(12))
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions permissions[]
}

//pivos

model userAccessPermissions {
  id           String  @id @unique @default(nanoid(12))
  userId       String
  permissionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission permissions? @relation(fields: [permissionId], references: [id], onDelete: Cascade)
}

//#endregion

//#region GENDERS
model genders {
  id    String @id @default(nanoid(12))
  name  String @unique
  label String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  persons persons[]
}

//#endregion

//#region ADRESSES
model addresses {
  id           String  @id @unique @default(nanoid(12))
  label        String?
  zipCode      String?
  country      String
  state        String
  city         String
  neighborhood String?
  street       String?
  number       String?
  complement   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company companyAddresses?
  person  personAddresses?
}

model companyAddresses {
  id        String @id @unique @default(nanoid(12))
  companyId String
  addressId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address addresses @relation(fields: [addressId], references: [id], onDelete: Cascade)
  company companies @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model personAddresses {
  id        String  @id @unique @default(nanoid(12))
  personId  String?
  addressId String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address addresses @relation(fields: [addressId], references: [id], onDelete: Cascade)
  persons persons?  @relation(fields: [personId], references: [id], onDelete: Cascade)
}

//#endregion

//#region COMPANIES

model companies {
  id           String  @id @default(nanoid(12))
  displayName  String
  legalName    String?
  fantasyName  String?
  documentCode String? @unique
  image        String?
  isBlocked    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address companyAddresses[]
  persons personCompanies[]
}

model personCompanies {
  id        String @id @default(uuid())
  companyId String
  personId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company companies @relation(fields: [companyId], references: [id], onDelete: Cascade)
  person  persons   @relation(fields: [personId], references: [id], onDelete: Cascade)

  personCompanyPermissions personCompanyPermissions[]
}

model personCompanyPermissions {
  id                   String @id @default(uuid())
  personCompanyId      String
  permissionSublevelId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personCompany       personCompanies     @relation(fields: [personCompanyId], references: [id], onDelete: Cascade)
  permissionSublevels permissionSublevels @relation(fields: [permissionSublevelId], references: [id], onDelete: Cascade)
}

//#endregion

//#region PERSONS

model persons {
  id             String    @id @default(nanoid(12))
  name           String
  surname        String?
  genderId       String
  birthDate      DateTime?
  birthCountry   String?
  documentNumber String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      users?
  address   personAddresses[]
  gender    genders           @relation(fields: [genderId], references: [id], onDelete: Cascade)
  companies personCompanies[]
}

//#endregion

//#region USERS
model users {
  id        String  @id @unique @default(nanoid(12))
  personId  String? @unique
  username  String  @unique
  email     String  @unique
  isBlocked Boolean @default(false)
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accesses    userAccesses[]
  person      persons?                @relation(fields: [personId], references: [id])
  permissions userAccessPermissions[]
}

//#endregion
